10 REM Creates a 3D-like environment w/ balls dropping onto isometric grid
20 *F 
30 ORMAXX=760:ORMAXY=580:SMAXX=319:SMAXY=191
40 PMMINX=48:PMMAXX=200:PMMINY=34:PMMAXY=214
50 PMBNDX=PMMAXX-PMMINX:PMBNDY=PMMAXY-PMMINY
60 GRIDSIZE=400:GRAVITY=7:BNCFACT=0.8
70 MAXBALLS=4:REM Max. num. of active balls
80 SPAWNRATE=%3:REM Frames bet. new ball spawns
90 XADJ=-260:YADJ=-160
110 DIM BALLS(4,8)
120 REM BALLS field indexes
130 BALLX=%0:BALLY=%1:BALLZ=%2:BALLVX=%3:BALLVY=4:BALLVZ=5:BALLSIZE=6:BALLCOLOR=7:BALLACTIVE=8
140 ORIGINX=640:ORIGINY=500
150 REM Isometric projection factors
160 ISOX1=0.866:ISOX2=0.866:ISOY1=0.5:ISOY2=-0.5
170 FRAMECNT=%0
180 EXEC INIT
190 DO 
200   EXEC PRCBALLS
210   REM Spawn new balls at reg. interv's
220   FRAMECNT=FRAMECNT+%1
230   IF FRAMECNT MOD SPAWNRATE=%0 AND BALLSCREATE<MAXBALLS THEN EXEC NEWBALL
240   POKE 77,0:REM Keep attract mode off
250   IF INKEY$<>"" THEN EXIT 
260 LOOP 
270 REM Disable PM graphics. Reset RAMTOP
280 POKE 53277,0:PAUSE 30:POKE 106,P106:GRAPHICS 0
290 END 
300 PROC NEWBALL
310   REM Find slot for new ball
320   FOR I=%1 TO MAXBALLS
330     IF BALLS(I,BALLACTIVE)=%0
340       REM Init. ball properties
350       BALLS(I,BALLX)=%0:BALLS(I,BALLY)=%0:BALLS(I,BALLZ)=300
360       BALLS(I,BALLVX)=(RND-0.5)*%2:REM Small random init. vel.
370       BALLS(I,BALLVY)=(RND-0.5)*%2
380       BALLS(I,BALLSIZE)=%1+INT(RND*%3)
390       BALLS(I,BALLCOLOR)=INT(RND*15)
400       IF BALLS(I,BALLCOLOR) MOD %2<>%0 THEN BALLS(I,BALLCOLOR)=BALLS(I,BALLCOLOR)+%1
410       BALLS(I,BALLACTIVE)=%1
420       BALLSCREATED=BALLSCREATED+%1
430       EXIT 
440     ENDIF 
450   NEXT I
460 ENDPROC 
470 PROC FILLGRID
480   GRIDSTEP=50
490   FOR X=-GRIDSIZE/%2 TO GRIDSIZE/%2 STEP GRIDSTEP
500     REM Draw line along X-axis
510     X1=X:Y1=-GRIDSIZE/%2:Z1=%0:X2=X:Y2=GRIDSIZE/%2:Z2=%0:C=%2:EXEC LINE3D
520     REM Draw line along Y-axis
530     X1=-GRIDSIZE/%2:Y1=X:Z1=%0:X2=GRIDSIZE/%2:Y2=X:Z2=%0:C=%2:EXEC LINE3D
540   NEXT X
550 ENDPROC 
560 PROC PRCBALLS
570   FOR I=%1 TO MAXBALLS
580     IF BALLS(I,BALLACTIVE)=%1
590       REM Apply gravity
600       BALLS(I,BALLVZ)=BALLS(I,BALLVZ)-GRAVITY
610       REM Update pos.
620       BALLS(I,BALLX)=BALLS(I,BALLX)+BALLS(I,BALLVX)
630       BALLS(I,BALLY)=BALLS(I,BALLY)+BALLS(I,BALLVY)
640       BALLS(I,BALLZ)=BALLS(I,BALLZ)+BALLS(I,BALLVZ)
650       REM Chk. for collision with floor
660       IF BALLS(I,BALLZ)<=%0
670         REM Bounce
680         BALLS(I,BALLZ)=50
690         BALLS(I,BALLVZ)=-BALLS(I,BALLVZ)*BNCFACT
700         IF BALLS(I,BALLVZ)>0.15
710           BPITCH=BALLS(I,BALLSIZE)*10
720           FOR S=210+BPITCH TO 200+BPITCH STEP -1:SOUND 0,S,10,3:NEXT S
730           SOUND %0,%0,%0,%0
740         ENDIF 
750         REM Add rand. horiz. movement after bounce
760         BALLS(I,BALLVX)=BALLS(I,BALLVX)+(RND-0.5)*%3
770         BALLS(I,BALLVY)=BALLS(I,BALLVY)+(RND-0.5)*%3
780       ENDIF 
790       REM Chk. if ball is outside grid
800       IF ABS(BALLS(I,BALLX))>GRIDSIZE/%2 OR ABS(BALLS(I,BALLY))>GRIDSIZE/%2
810         REM Reset ball pos. to top
820         BALLS(I,BALLX)=%0
830         BALLS(I,BALLY)=%0
840         BALLS(I,BALLZ)=300
850         BALLS(I,BALLVX)=(RND-0.5)*%2
860         BALLS(I,BALLVY)=(RND-0.5)*%2
870         BALLS(I,BALLVZ)=%0
880       ENDIF 
890       REM Cnv. 3D coord's to isometric pos. and draw ball
900       CO3DX=BALLS(I,BALLX):CO3DY=BALLS(I,BALLY):CO3DZ=BALLS(I,BALLZ)
910       EXEC CNV3DTOSCRN
920       BALL=I:EXEC POSBALL
930     ENDIF 
940   NEXT I
950 ENDPROC 
960 REM Cnv. 3D coord's to isometric coord's
970 REM Input: CO3DX,CO3DY,CO3DZ
980 REM Output: SCRNX,SCRNY
990 PROC CNV3DTOSCRN
1000   REM Cnv. 3D to isometric 2D
1010   SCRNX=ORIGINX+XADJ+CO3DX*ISOX1+CO3DY*ISOX2
1020   SCRNY=ORIGINY+YADJ+(CO3DX*ISOY1+CO3DY*ISOY2)-CO3DZ
1030 ENDPROC 
1040 PROC LINE3D
1050   REM Cnv. 3D pts. to screen coord's
1060   CO3DX=X1:CO3DY=Y1:CO3DZ=Z1:EXEC CNV3DTOSCRN:SX1=SCRNX:SY1=SCRNY
1070   CO3DX=X2:CO3DY=Y2:CO3DZ=Z2:EXEC CNV3DTOSCRN:SX2=SCRNX:SY2=SCRNY
1080   REM Draw line
1090   COLOR %1
1100   SX=SX1:SY=SY1:EXEC SCRPLOT
1110   SX=SX2:SY=SY2:EXEC SCRDRAW
1130 ENDPROC 
1140 REM Input: SX,SY
1150 PROC SCRPLOT
1160   EXEC SCALECOORD
1170   PLOT SCX,SCY
1180 ENDPROC 
1190 REM Input: SX,SY
1200 PROC SCRDRAW
1210   EXEC SCALECOORD
1220   DRAWTO SCX,SCY
1230 ENDPROC 
1240 REM Input: SX,SY
1250 REM Output: SCX,SCY
1260 PROC SCALECOORD
1270   SCX=SMAXX*SX/ORMAXX
1280   SCY=SMAXY*SY/ORMAXY
1290 ENDPROC 
1300 PROC INIT
1310   EXEC LDPMMOVE
1320   P106=PEEK(106):PMBASE=176
1330   PMLOCBASE=PMBASE*256+1024
1340   REM Tell sys. where sprite mem. is. Move RAMTOP back
1350   POKE 54279,PMBASE:POKE 106,PMBASE
1360   GRAPHICS 8+16:SETCOLOR %2,%0,%0
1370   EXEC FILLGRID:REM Init. grid bitmap
1380   DIM BALL1$(7),BALL2$(9),BALL3$(15),SHAPE$(15),PMOLDY(3)
1390   FOR I=%0 TO %3:PMOLDY(I)=-1:NEXT I
1400   REM Define different ball sizes
1410   RESTORE #BALLDATA
1420   FOR I=%1 TO 15:READ C:BALL3$(I)=CHR$(C):NEXT I
1430   FOR I=%1 TO 9:READ C:BALL2$(I)=CHR$(C):NEXT I
1440   FOR I=%1 TO 7:READ C:BALL1$(I)=CHR$(C):NEXT I
1450   REM Clear sprite mem.
1460   FOR I=PMLOCBASE TO PMLOCBASE+1023:POKE I,%0:NEXT I
1470   REM enable, single-line res., priority, size
1480   POKE 53277,%3:POKE 559,62:POKE 623,%0:FOR I=53256 TO 53259:POKE I,%0:NEXT I
1490 ENDPROC 
1500 REM Sprite shape data
1510 # BALLDATA
1520 DATA 14,24,60,60,126,126,255,255,255,255,126,126,60,60,24
1530 DATA 8,24,60,60,126,126,60,60,24
1540 DATA 6,24,24,60,60,24,24
1550 REM Input: SCRNX,SCRNY,BALL
1560 PROC POSBALL
1570   SX=SCRNX:SY=SCRNY:EXEC SCPMCOORD
1580   PMBALL=BALL-%1
1590   REM Base loc. for ball + Y-offset
1600   PMLOC=PMLOCBASE+PMBALL*256+34
1610   BSIZE=BALLS(BALL,BALLSIZE)
1620   IF BSIZE=%1
1630     SHAPE$=BALL1$
1640   ELSE 
1650     IF BSIZE=%2
1660       SHAPE$=BALL2$
1670     ELSE 
1680       SHAPE$=BALL3$
1690     ENDIF 
1700   ENDIF 
1710   IF SCX>=%0 AND SCY>=%0
1720     POKE 704+PMBALL,BALLS(BALL,BALLCOLOR)*16+10
1730     POKE 53248+PMBALL,SCX+48:REM Horiz. pos. for player
1740     IF PMOLDY(PMBALL)=-1
1750       REM Bring ball to screen
1760       X=USR(1536,ADR(SHAPE$),%0,PMLOC+SCY)
1770     ELSE 
1780       REM Move ball
1790       X=USR(1536,ADR(SHAPE$),PMLOC+PMOLDY(PMBALL),PMLOC+SCY)
1800     ENDIF 
1810     PMOLDY(PMBALL)=SCY
1820   ELSE 
1830     REM Hide ball
1840     IF PMOLDY(PMBALL)>=%0
1850       X=USR(1536,ADR(SHAPE$),PMLOC+PMOLDY(PMBALL),%0)
1860       PMOLDY(PMBALL)=-1
1870     ENDIF 
1880   ENDIF 
1890 ENDPROC 
1900 REM Inputs: SX,SY
1910 REM Outputs: SCX,SCY
1920 PROC SCPMCOORD
1930   SCX=PMBNDX*SX/ORMAXX
1940   SCY=PMBNDY*SY/ORMAXY
1950 ENDPROC 
1960 REM David Markley's high-speed PM move routine
1970 REM from Compute!'s First Book of Atari Graphics
1980 REM Use: X=USR(VPADR,IMAGE,OLDADR,DESTADR)
1990 PROC LDPMMOVE
2000   VP=1536:RESTORE #VERTPOS
2010   FOR G=0 TO 43
2020     READ D
2030     POKE VP+G,D
2040   NEXT G
2050 ENDPROC 
2060 REM ** VERTICAL POSITIONER CODE **
2070 # VERTPOS
2080 DATA 104,162,5,104,149,220,202,16,250,198,220,198,222,160,0,177,224,170
2090 DATA 168,165,223,240,9,169,0,145,222,136,208,249,138,168,165,221,240,7,177,224,145,220,136,208,249,96
