10 REM Creates a 3D-like environment w/ balls dropping onto isometric grid
20 *F 
30 ORMAXX=760:ORMAXY=580:SMAXX=319:SMAXY=191
40 PMMINX=48:PMMAXX=200:PMMINY=34:PMMAXY=214
50 PMBNDX=PMMAXX-PMMINX:PMBNDY=PMMAXY-PMMINY
60 GRIDSIZE=400:GRAVITY=7:BNCFACT=0.8
70 MAXBALLS=4:REM Max. num. of active balls
80 SPAWNRATE=%3:REM Frames bet. new ball spawns
90 XADJ=-260:YADJ=-160
100 DIM BALLS(4,8)
110 REM BALLS field indexes
120 BALLX=%0:BALLY=%1:BALLZ=%2:BALLVX=%3:BALLVY=4:BALLVZ=5:BALLSIZE=6:BALLCOLOR=7:BALLACTIVE=8
130 ORIGINX=640:ORIGINY=500
140 REM Isometric projection factors
150 ISOX1=0.866:ISOX2=0.866:ISOY1=0.5:ISOY2=-0.5
160 FRAMECNT=%0
170 EXEC INIT
180 DO 
190   EXEC PRCBALLS
200   REM Spawn new balls at reg. interv's
210   FRAMECNT=FRAMECNT+%1
220   TEMP1=FRAMECNT MOD SPAWNRATE:TEMP2=BALLSCREATE<MAXBALLS
230   IF TEMP1 AND TEMP2 THEN EXEC NEWBALL
240   POKE 77,0:REM Keep attract mode off
250   IF INKEY$<>"" THEN EXIT 
260 LOOP 
270 REM Disable PM graphics. Reset RAMTOP
280 POKE 53277,0:PAUSE 30:POKE 106,P106:GRAPHICS 0
290 END 
300 PROC NEWBALL
310   REM Find slot for new ball
320   FOR I=%1 TO MAXBALLS
330     IF BALLS(I,BALLACTIVE)=%0
340       REM Init. ball properties
350       BALLS(I,BALLX)=%0:BALLS(I,BALLY)=%0:BALLS(I,BALLZ)=300
360       BALLS(I,BALLVX)=(RND-0.5)*%2:REM Small random init. vel.
370       BALLS(I,BALLVY)=(RND-0.5)*%2
380       BALLS(I,BALLSIZE)=%1+INT(RND*%3)
390       BALLS(I,BALLCOLOR)=INT(RND*15)
400       TEMP1=BALLS(I,BALLCOLOR)
410       IF TEMP1 MOD %2<>%0 THEN BALLS(I,BALLCOLOR)=TEMP1+%1
420       BALLS(I,BALLACTIVE)=%1
430       BALLSCREATED=BALLSCREATED+%1
440       EXIT 
450     ENDIF 
460   NEXT I
470 ENDPROC 
480 PROC FILLGRID
490   GRIDSTEP=50
500   ITER1=GRIDSIZE/%2
510   FOR X=-ITER1 TO ITER1 STEP GRIDSTEP
520     REM Draw line along X-axis
530     X1=X:Y1=-GRIDSIZE/%2:Z1=%0:X2=X:Y2=GRIDSIZE/%2:Z2=%0:C=%2:EXEC LINE3D
540     REM Draw line along Y-axis
550     X1=-GRIDSIZE/%2:Y1=X:Z1=%0:X2=GRIDSIZE/%2:Y2=X:Z2=%0:C=%2:EXEC LINE3D
560   NEXT X
570 ENDPROC 
580 PROC PRCBALLS
590   FOR I=%1 TO MAXBALLS
600     IF BALLS(I,BALLACTIVE)=%1
610       REM Apply gravity
620       TEMP1=BALLS(I,BALLVZ)-GRAVITY
630       BALLS(I,BALLVZ)=TEMP1
640       REM Update pos.
650       TEMP1=BALLS(I,BALLX)
660       TEMP1=TEMP1+BALLS(I,BALLVX)
670       BALLS(I,BALLX)=TEMP1
680       TEMP1=BALLS(I,BALLY)
690       TEMP1=TEMP1+BALLS(I,BALLVY)
700       BALLS(I,BALLY)=TEMP1
710       TEMP1=BALLS(I,BALLZ)
720       TEMP1=TEMP1+BALLS(I,BALLVZ)
730       BALLS(I,BALLZ)=TEMP1
740       REM Chk. for collision with floor
750       IF BALLS(I,BALLZ)<=%0
760         REM Bounce
770         BALLS(I,BALLZ)=50
780         BALLS(I,BALLVZ)=-BALLS(I,BALLVZ)*BNCFACT
790         IF BALLS(I,BALLVZ)>0.15
800           BPITCH=BALLS(I,BALLSIZE)*10
810           FOR S=210+BPITCH TO 200+BPITCH STEP -1:SOUND 0,S,10,3:NEXT S
820           SOUND %0,%0,%0,%0
830         ENDIF 
840         REM Add rand. horiz. movement after bounce
850         TEMP1=BALLS(I,BALLVX)
860         TEMP1=TEMP1+(RND-0.5)*%3
870         BALLS(I,BALLVX)=TEMP1
880         TEMP1=BALLS(I,BALLVY)
890         TEMP1=TEMP1+(RND-0.5)*%3
900         BALLS(I,BALLVY)=TEMP1
910       ENDIF 
920       REM Chk. if ball is outside grid
930       TEMP1=ABS(BALLS(I,BALLX))
940       TEMP2=ABS(BALLS(I,BALLY)):TEMP3=GRIDSIZE/%2
950       IF TEMP1>TEMP3 OR TEMP2>TEMP3
960         REM Reset ball pos. to top
970         BALLS(I,BALLX)=%0
980         BALLS(I,BALLY)=%0
990         BALLS(I,BALLZ)=300
1000         BALLS(I,BALLVX)=(RND-0.5)*%2
1010         BALLS(I,BALLVY)=(RND-0.5)*%2
1020         BALLS(I,BALLVZ)=%0
1030       ENDIF 
1040       REM Cnv. 3D coord's to isometric pos. and draw ball
1050       CO3DX=BALLS(I,BALLX):CO3DY=BALLS(I,BALLY):CO3DZ=BALLS(I,BALLZ)
1060       EXEC CNV3DTOSCRN
1070       BALL=I:EXEC POSBALL
1080     ENDIF 
1090   NEXT I
1100 ENDPROC 
1110 REM Cnv. 3D coord's to isometric coord's
1120 REM Input: CO3DX,CO3DY,CO3DZ
1130 REM Output: SCRNX,SCRNY
1140 PROC CNV3DTOSCRN
1150   REM Cnv. 3D to isometric 2D
1160   SCRNX=ORIGINX+XADJ+CO3DX*ISOX1+CO3DY*ISOX2
1170   SCRNY=ORIGINY+YADJ+(CO3DX*ISOY1+CO3DY*ISOY2)-CO3DZ
1180 ENDPROC 
1190 PROC LINE3D
1200   REM Cnv. 3D pts. to screen coord's
1210   CO3DX=X1:CO3DY=Y1:CO3DZ=Z1:EXEC CNV3DTOSCRN:SX1=SCRNX:SY1=SCRNY
1220   CO3DX=X2:CO3DY=Y2:CO3DZ=Z2:EXEC CNV3DTOSCRN:SX2=SCRNX:SY2=SCRNY
1230   REM Draw line
1240   COLOR %1
1250   SX=SX1:SY=SY1:EXEC SCRPLOT
1260   SX=SX2:SY=SY2:EXEC SCRDRAW
1270 ENDPROC 
1280 REM Input: SX,SY
1290 PROC SCRPLOT
1300   EXEC SCALECOORD
1310   PLOT SCX,SCY
1320 ENDPROC 
1330 REM Input: SX,SY
1340 PROC SCRDRAW
1350   EXEC SCALECOORD
1360   DRAWTO SCX,SCY
1370 ENDPROC 
1380 REM Input: SX,SY
1390 REM Output: SCX,SCY
1400 PROC SCALECOORD
1410   SCX=SMAXX*SX/ORMAXX
1420   SCY=SMAXY*SY/ORMAXY
1430 ENDPROC 
1440 PROC INIT
1450   EXEC LDPMMOVE
1460   P106=PEEK(106):PMBASE=176
1470   PMLOCBASE=PMBASE*256+1024
1480   REM Tell sys. where sprite mem. is. Move RAMTOP back
1490   POKE 54279,PMBASE:POKE 106,PMBASE
1500   GRAPHICS 8+16:SETCOLOR %2,%0,%0
1510   EXEC FILLGRID:REM Init. grid bitmap
1520   DIM PMOLDY(3)
1530   FOR I=%0 TO %3:PMOLDY(I)=-1:NEXT I
1540   REM Define different ball sizes
1550   BALL3=$0600:BALL2=BALL3+15:BALL1=BALL2+9
1560   RESTORE #BALLDATA
1570   FOR I=BALL3 TO BALL3+14:READ C:POKE I,C:NEXT I
1580   FOR I=BALL2 TO BALL2+8:READ C:POKE I,C:NEXT I
1590   FOR I=BALL1 TO BALL1+6:READ C:POKE I,C:NEXT I
1600   REM Clear sprite mem.
1610   FOR I=PMLOCBASE TO PMLOCBASE+1023:POKE I,%0:NEXT I
1620   REM enable, single-line res., priority, size
1630   POKE 53277,%3:POKE 559,62:POKE 623,%0:FOR I=53256 TO 53259:POKE I,%0:NEXT I
1640 ENDPROC 
1650 REM Input: SCRNX,SCRNY,BALL
1660 PROC POSBALL
1670   SX=SCRNX:SY=SCRNY:EXEC SCPMCOORD
1680   PMBALL=BALL-%1
1690   REM Base loc. for ball + Y-offset
1700   PMLOC=PMLOCBASE+PMBALL*256+34
1710   BSIZE=BALLS(BALL,BALLSIZE)
1720   IF BSIZE=%1
1730     SHAPE=BALL1
1740   ELSE 
1750     IF BSIZE=%2
1760       SHAPE=BALL2
1770     ELSE 
1780       SHAPE=BALL3
1790     ENDIF 
1800   ENDIF 
1810   IF SCX>=%0 AND SCY>=%0
1820     TEMP1=BALLS(BALL,BALLCOLOR):TEMP2=TEMP1*16+10
1830     POKE 704+PMBALL,TEMP2
1840     POKE 53248+PMBALL,SCX+48:REM Horiz. pos. for player
1850     IF PMOLDY(PMBALL)=-1
1860       REM Bring ball to screen
1870       TEMP1=PMLOC+SCY
1880       X=USR($6000,SHAPE,%0,TEMP1)
1890     ELSE 
1900       REM Move ball
1910       TEMP1=PMOLDY(PMBALL):TEMP2=PMLOC+TEMP1:TEMP3=PMLOC+SCY
1920       X=USR($6000,SHAPE,TEMP2,TEMP3)
1930     ENDIF 
1940     PMOLDY(PMBALL)=SCY
1950   ELSE 
1960     REM Hide ball
1970     IF PMOLDY(PMBALL)>=%0
1980       TEMP1=PMOLDY(PMBALL):TEMP2=PMLOC+TEMP1
1990       X=USR($6000,SHAPE,TEMP2,%0)
2000       PMOLDY(PMBALL)=-1
2010     ENDIF 
2020   ENDIF 
2030 ENDPROC 
2040 REM Inputs: SX,SY
2050 REM Outputs: SCX,SCY
2060 PROC SCPMCOORD
2070   SCX=PMBNDX*SX/ORMAXX
2080   SCY=PMBNDY*SY/ORMAXY
2090 ENDPROC 
2100 REM David Markley's high-speed PM move routine
2110 REM from Compute!'s First Book of Atari Graphics
2120 REM Use: X=USR(VPADR,IMAGE,OLDADR,DESTADR)
2130 PROC LDPMMOVE
2140   VP=$6000:RESTORE #VERTPOS
2150   FOR G=0 TO 43
2160     READ D
2170     POKE VP+G,D
2180   NEXT G
2190 ENDPROC 
2200 REM ** VERTICAL POSITIONER CODE **
2210 # VERTPOS
2220 DATA 104,162,5,104,149,220,202,16,250,198,220,198,222,160,0,177,224,170
2230 DATA 168,165,223,240,9,169,0,145,222,136,208,249,138,168,165,221,240,7,177,224,145,220,136,208,249,96
2240 REM Sprite shape data
2250 # BALLDATA
2260 DATA 14,24,60,60,126,126,255,255,255,255,126,126,60,60,24
2270 DATA 8,24,60,60,126,126,60,60,24
2280 DATA 6,24,24,60,60,24,24
