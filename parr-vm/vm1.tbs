10 IP=%0:SP=-1:TR=%1
20 DSIZE=%0:CODELEN=4:STACKLEN=10:OPCODES=17
40 DIM CODE(CODELEN),STACK(STACKLEN),OPANDCNT(OPCODES),OPCODE$(6),INST$(OPCODES*6+6)
50 FOR I=%0 TO CODELEN-%1:CODE(I)=%0:NEXT I:FOR I=%0 TO STACKLEN-%1:STACK(I)=%0:NEXT I
60 RESTORE 1000:FOR I=%0 TO CODELEN-1:READ X:CODE(I)=X:NEXT I
70 RESTORE #OPCODES:FOR B=%0 TO OPCODES-%1:READ OPCODE$,ARGCNT:INST$(B*6+%1)=OPCODE$:OPANDCNT(B)=ARGCNT:NEXT B
80 EXEC EXCODE
90 END 
100 PROC EXCODE
110   WHILE IP<CODELEN AND CODE(IP)<>16
120     OPCODE=CODE(IP)
130     IF TR=%1 THEN EXEC DISASSEMBLE
140     IP=IP+%1
150     IF OPCODE=14:? STACK(SP):SP=SP-%1:GO# ENDEXLOOP:ENDIF 
160     IF OPCODE=9:SP=SP+%1:STACK(SP)=CODE(IP):IP=IP+%1:ENDIF 
170     # ENDEXLOOP:WEND 
180 ENDPROC 
780 PROC DISASSEMBLE
790   OPANDS=OPANDCNT(OPCODE)
800   ? IP;:? ": ";:? INST$(OPCODE*6+%1,OPCODE*6+6);
810   IF OPANDS=%1:? " ";:? CODE(IP+%1):GOTO 830:ENDIF 
820   ? 
830 ENDPROC 
1000 DATA 9,99,14,16
2000 # OPCODES:DATA NULL  ,0,IADD  ,0,ISUB  ,0,IMUL  ,0,ILT   ,0,IEQ   ,0,BR    ,1,BRT   ,1,BRF   ,1
2010 DATA ICONST,1,LOAD  ,1,GLOAD ,1,STORE ,1,GSTORE,1,PRINT ,0,POP   ,0,HALT  ,0
