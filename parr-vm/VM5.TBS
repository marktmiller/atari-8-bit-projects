10 IP=22:SP=-1:FP=-1:TR=%1
20 DSIZE=%0:CODELEN=29:STACKLEN=50:OPCODES=19
30 IF DSIZE>%0 THEN DIM GLOBALS(DSIZE)
40 DIM CODE(CODELEN),STACK(STACKLEN),OPANDCNT(OPCODES),OPCODE$(6),INST$(OPCODES*6+6)
50 FOR I=%0 TO CODELEN-%1:CODE(I)=%0:NEXT I:FOR I=%0 TO STACKLEN-%1:STACK(I)=%0:NEXT I
60 RESTORE #PRG:FOR I=%0 TO CODELEN-%1:READ X:CODE(I)=X:NEXT I
70 RESTORE #OPCODES:FOR B=%0 TO OPCODES-%1:READ OPCODE$,X:INST$(B*6+%1)=OPCODE$:OPANDCNT(B)=X:NEXT B
80 EXEC EXCODE
90 END 
100 PROC EXCODE
110   WHILE IP<CODELEN AND CODE(IP)<>16
120     OPCODE=CODE(IP)
130     IF TR=%1 THEN EXEC DISASSEMBLE
140     IP=IP+%1
150     IF OPCODE=14:? STACK(SP);:SP=SP-%1:GO# TRACING:ENDIF :REM PRINT
160     IF OPCODE=9:SP=SP+%1:STACK(SP)=CODE(IP):IP=IP+%1:GO# TRACING:ENDIF :REM ICONST
170     IF OPCODE=13:GLOBALS(CODE(IP))=STACK(SP):SP=SP-%1:IP=IP+%1:GO# TRACING:ENDIF :REM GSTORE
180     IF OPCODE=11:SP=SP+%1:STACK(SP)=GLOBALS(CODE(IP)):IP=IP+%1:GO# TRACING:ENDIF :REM GLOAD
190     IF OPCODE=4
200       VAL1=STACK(SP):VAL2=STACK(SP-%1):SP=SP-%1
210       IF VAL2<VAL1:STACK(SP)=%1:ELSE :STACK(SP)=%0:ENDIF 
220       GO# TRACING
230     ENDIF :REM ILT
240     IF OPCODE=2:STACK(SP-%1)=STACK(SP-%1)-STACK(SP):SP=SP-%1:GO# TRACING:ENDIF :REM ISUB
250     IF OPCODE=3:STACK(SP-%1)=STACK(SP-%1)*STACK(SP):SP=SP-%1:GO# TRACING:ENDIF :REM IMUL
260     IF OPCODE=6:IP=CODE(IP):GO# TRACING:ENDIF :REM BR
270     IF OPCODE=7
280       IF STACK(SP)=%1:IP=CODE(IP):ELSE :IP=IP+%1:ENDIF 
290       SP=SP-%1
300       GO# TRACING
310     ENDIF :REM BRT
320     IF OPCODE=8
330       IF STACK(SP)=%0:IP=CODE(IP):ELSE :IP=IP+%1:ENDIF 
340       SP=SP-%1
350       GO# TRACING
360     ENDIF :REM BRF
370     IF OPCODE=10:SP=SP+%1:STACK(SP)=STACK(FP+CODE(IP)):IP=IP+%1:GO# TRACING:ENDIF :REM LOAD
380     IF OPCODE=12:STACK(FP+CODE(IP))=STACK(SP):IP=IP+%1:SP=SP-%1:GO# TRACING:ENDIF :REM STORE
390     IF OPCODE=15:SP=SP-%1:GO# TRACING:ENDIF :REM POP
400     IF OPCODE=17
410       ADDR=CODE(IP):STACK(SP+%1)=CODE(IP+%1):STACK(SP+%2)=FP:STACK(SP+%3)=IP+%2:SP=SP+%3:FP=SP:IP=ADDR
420       GO# TRACING
430     ENDIF :REM CALL
440     IF OPCODE=18
450       RVAL=STACK(SP):SP=FP:IP=STACK(SP):FP=STACK(SP-%1):SP=SP-%2-STACK(SP-%2):STACK(SP)=RVAL
460       GO# TRACING
470     ENDIF :REM RET
480     IF OPCODE=1:STACK(SP-%1)=STACK(SP-%1)+STACK(SP):SP=SP-%1:GO# TRACING:ENDIF :REM IADD
490     IF OPCODE=5
500       VAL1=STACK(SP):VAL2=STACK(SP-%1):SP=SP-%1
510       IF VAL1=VAL2:STACK(SP)=%1:ELSE :STACK(SP)=%0:ENDIF 
520       GO# TRACING
530     ENDIF :REM IEQ
670     ? "INVALID OPCODE: ";:? OPCODE;:? " AT IP=";:? IP-1:END 
680     # TRACING:IF TR=%1 THEN EXEC DISPSTACK
690   WEND 
700   IF IP<CODELEN
710     IF CODE(IP)=16 THEN OPCODE=16
720     IF TR=%1:EXEC DISASSEMBLE:EXEC DISPSTACK:EXEC DUMPDATAMEM:ENDIF 
730   ELSE 
740     ? "IP OVERFLOW"
750     IF TR=%1 THEN EXEC DISPSTACK
760   ENDIF 
770 ENDPROC 
780 PROC DISASSEMBLE
790   OPANDS=OPANDCNT(OPCODE)
800   IF IP<CODELEN
810     ? IP;:? ": ";:? INST$(OPCODE*6+%1,OPCODE*6+6);
820     IF OPANDS>=%1 THEN ? " ";:? CODE(IP+%1);
830     IF OPANDS=%2 THEN ? ",";:? CODE(IP+%2);
840   ENDIF 
850 ENDPROC 
860 PROC DISPSTACK
870   ? "  STACK=[";
880   IF SP>=%0:FOR K=%0 TO SP:? " ";:? STACK(K);:NEXT K:ENDIF 
890   ? " ]"
900 ENDPROC 
910 PROC DUMPDATAMEM
920   IF DSIZE>%0
930     ? :? "DATA MEMORY:"
940     FOR I=%0 TO DSIZE-%1:? I;:? ": ";:? GLOBALS(I):NEXT I
950   ENDIF 
960 ENDPROC 
1000 # PRG:DATA 10,-3,9,2,4,8,10,9,1,18
1010 DATA 10,-3,10,-3,9,1,2,17,0,1,3,18
1020 DATA 9,2,17,0,1,14,16
2000 # OPCODES:DATA NULL  ,0,IADD  ,0,ISUB  ,0,IMUL  ,0,ILT   ,0,IEQ   ,0,BR    ,1,BRT   ,1,BRF   ,1,ICONST,1
2010 DATA LOAD  ,1,GLOAD ,1,STORE ,1,GSTORE,1,PRINT ,0,POP   ,0,HALT  ,0,CALL  ,2,RET   ,0
