100 SP=-1:FP=-1:TR=%0
110 DSIZE=%1:CODESTORE=200:STACKLEN=50:OPCODES=22
120 IF DSIZE>%0 THEN DIM GLOBALS(DSIZE)
130 DIM CODE(CODESTORE),STACK(STACKLEN),OPANDCNT(OPCODES),OPCODE$(6),INST$(OPCODES*6+6)
140 DIM NUMTEST$(4)
150 FOR I=%0 TO CODELEN-%1:CODE(I)=%0:NEXT I:FOR I=%0 TO STACKLEN-%1:STACK(I)=%0:NEXT I
160 RESTORE #OPCODES:FOR B=%0 TO OPCODES-%1:READ OPCODE$,X:INST$(B*6+%1)=OPCODE$:OPANDCNT(B)=X:NEXT B
170 DIM COM$(40)
180 OPEN #2,4,0,"E:"
190 REPEAT 
200   ? :? "READY"
210   INPUT #2;COM$
220   IF LEN(COM$)>=2
230     IF COM$(1,2)="IP"
240       IF LEN(COM$)>2
250         IF COM$(3,3)="="
260           IF LEN(COM$)>3
270             NUMTEST$=COM$(4):EXEC CHKNUM
280             IF NUMP=1
290               IP=VAL(COM$(4,LEN(COM$))):GO# ENDINTERACT_LOOP
300             ELSE 
310               ? "ERROR: CAN ONLY ASSIGN NUMBER TO REGISTER":GO# ENDINTERACT_LOOP
320             ENDIF :REM * IF NUMP=1 *
330           ELSE 
340             IP=0:GO# ENDINTERACT_LOOP
350           ENDIF :REM * IF LEN(COM$)>3 *
360         ELSE 
370           ? "SYNTAX ERROR":GO# ENDINTERACT_LOOP
380         ENDIF :REM * IF COM$(3,3)="=" *
390       ELSE 
400         ? IP:GO# ENDINTERACT_LOOP
410       ENDIF :REM * IF LEN(COM$)>2 *
420     ENDIF :REM * IF COM$(1,2)="IP" *
430     IF COM$(1,2)="SP"
440       IF LEN(COM$)>2
450         IF COM$(3,3)="="
460           IF LEN(COM$)>3
470             NUMTEST$=COM$(4):EXEC CHKNUM
480             IF NUMP=1
490               SP=VAL(COM$(4,LEN(COM$))):GO# ENDINTERACT_LOOP
500             ELSE 
510               ? "ERROR: CAN ONLY ASSIGN NUMBER TO REGISTER":GO# ENDINTERACT_LOOP
520             ENDIF :REM * IF NUMP=1 *
530           ELSE 
540             SP=0:GO# ENDINTERACT_LOOP
550           ENDIF :REM * IF LEN(COM$)>3 *
560         ELSE 
570           ? "SYNTAX ERROR":GO# ENDINTERACT_LOOP
580         ENDIF :REM * IF COM$(3,3)="=" *
590       ELSE 
600         ? SP:GO# ENDINTERACT_LOOP
610       ENDIF :REM * IF LEN(COM$)>2 *
620     ENDIF :REM * IF COM$(1,2)="SP" *
630   ENDIF :REM * IF LEN(COM$)>=2 *
640   IF LEN(COM$)=3
650     IF COM$(1,3)="RUN"
660       IF CODELEN>0:EXEC EXCODE:ENDIF 
670       GO# ENDINTERACT_LOOP
680     ENDIF 
690   ENDIF 
700   IF LEN(COM$)=4
710     IF COM$(1,4)="LIST":EXEC LSTPRG:ENDIF 
720     IF COM$(1,4)="EXIT":STPLOOP=1:ENDIF 
730     GO# ENDINTERACT_LOOP
740   ENDIF 
750   IF LEN(COM$)=5
760     IF COM$(1,5)="DEBUG":TR=%1:ENDIF 
770     GO# ENDINTERACT_LOOP
780   ENDIF 
790   IF LEN(COM$)=7
800     IF COM$(1,7)="NODEBUG":TR=%0:ENDIF 
810     GO# ENDINTERACT_LOOP
820   ENDIF 
830   IF LEN(COM$)>=12
840     IF COM$(1,6)="BYTELD"
850       IF COM$(8,8)="D"
860         IF COM$(9,9)=":" OR COM$(10,10)=":"
870           EXEC LDPRG
880           IF LDSUCCESS=%0 THEN ? "ERROR: FILE NOT FOUND"
890           GO# ENDINTERACT_LOOP
900         ENDIF 
910       ENDIF 
920     ENDIF 
930   ENDIF 
940   ? "ERROR: ";COM$;" NOT A KNOWN COMMAND"
950   # ENDINTERACT_LOOP:UNTIL STPLOOP=1
960 CLOSE #2
970 END 
980 PROC EXCODE
990   STKERR=%0
1000   WHILE IP<CODELEN AND CODE(IP)<>16 AND STKERR=%0
1010     OPCODE=CODE(IP)
1020     IF TR=%1 THEN EXEC DISASSEMBLE
1030     IP=IP+%1
1040     IF OPCODE=14
1050       STKRANGE=SP-%1:EXEC CHKSTACK
1060       IF STKERR=%0
1070         ? STACK(SP);" ";
1080         SP=SP-%1
1090       ENDIF 
1100       GO# TRACING
1110     ENDIF 
1120   ENDIF :REM PRINT
1130   IF OPCODE=9
1140     STKRANGE=SP+%1:EXEC CHKSTACK
1150     IF STKERR=%0
1160       SP=SP+%1
1170       STACK(SP)=CODE(IP)
1180       IP=IP+%1
1190     ENDIF 
1200     GO# TRACING
1210   ENDIF :REM ICONST
1220   IF OPCODE=13
1230     STKRANGE=SP-%1:EXEC CHKSTACK
1240     IF STKERR=%0
1250       ADDR=CODE(IP)
1260       GLOBALS(ADDR)=STACK(SP)
1270       SP=SP-%1:IP=IP+%1
1280     ENDIF 
1290     GO# TRACING
1300   ENDIF :REM GSTORE
1310   IF OPCODE=11
1320     STKRANGE=SP+%1:EXEC CHKSTACK
1330     IF STKERR=%0
1340       SP=SP+%1
1350       ADDR=CODE(IP)
1360       STACK(SP)=GLOBALS(ADDR)
1370       IP=IP+%1
1380     ENDIF 
1390     GO# TRACING
1400   ENDIF :REM GLOAD
1410   IF OPCODE=4
1420     STKRANGE=SP-%1:EXEC CHKSTACK
1430     IF STKERR=%0
1440       VAL1=STACK(SP):VAL2=STACK(SP-%1)
1450       SP=SP-%1
1460       IF VAL2<VAL1:STACK(SP)=%1:ELSE :STACK(SP)=%0:ENDIF 
1470     ENDIF 
1480     GO# TRACING
1490   ENDIF :REM ILT
1500   IF OPCODE=2
1510     STKRANGE=SP-%1:EXEC CHKSTACK
1520     IF STKERR=%0
1530       STACK(SP-%1)=STACK(SP-%1)-STACK(SP)
1540       SP=SP-%1
1550     ENDIF 
1560     GO# TRACING
1570   ENDIF :REM ISUB
1580   IF OPCODE=3
1590     STKRANGE=SP-%1:EXEC CHKSTACK
1600     IF STKERR=%0
1610       STACK(SP-%1)=STACK(SP-%1)*STACK(SP)
1620       SP=SP-%1
1630     ENDIF 
1640     GO# TRACING
1650   ENDIF :REM IMUL
1660   IF OPCODE=6:IP=CODE(IP):GO# TRACING:ENDIF :REM BR
1670   IF OPCODE=7
1680     STKRANGE=SP-%1:EXEC CHKSTACK
1690     IF STKERR=%0
1700       IF STACK(SP)=%1:IP=CODE(IP):ELSE :IP=IP+%1:ENDIF 
1710       SP=SP-%1
1720     ENDIF 
1730     GO# TRACING
1740   ENDIF :REM BRT
1750   IF OPCODE=8
1760     STKRANGE=SP-%1:EXEC CHKSTACK
1770     IF STKERR=%0
1780       IF STACK(SP)=%0:IP=CODE(IP):ELSE :IP=IP+%1:ENDIF 
1790       SP=SP-%1
1800     ENDIF 
1810     GO# TRACING
1820   ENDIF :REM BRF
1830   IF OPCODE=10
1840     STKRANGE=SP+%1:EXEC CHKSTACK
1850     IF STKERR=%0
1860       SP=SP+%1
1870       OFFSET=CODE(IP)
1880       STACK(SP)=STACK(FP+OFFSET)
1890       IP=IP+%1
1900     ENDIF 
1910     GO# TRACING
1920   ENDIF :REM LOAD
1930   IF OPCODE=12
1940     STKRANGE=SP-%1:EXEC CHKSTACK
1950     IF STKERR=%0
1960       OFFSET=CODE(IP)
1970       STACK(FP+OFFSET)=STACK(SP)
1980       IP=IP+%1:SP=SP-%1
1990     ENDIF 
2000     GO# TRACING
2010   ENDIF :REM STORE
2020   IF OPCODE=15
2030     STKRANGE=SP-%1:EXEC CHKSTACK
2040     IF STKERR=%0
2050       SP=SP-%1
2060     ENDIF 
2070     GO# TRACING
2080   ENDIF :REM POP
2090   IF OPCODE=17
2100     STKRANGE=SP+%3:EXEC CHKSTACK
2110     IF STKERR=%0
2120       ADDR=CODE(IP)
2130       REM Store frame ptr.
2140       STACK(SP+%1)=CODE(IP+%1)
2150       REM Store arg. count
2160       STACK(SP+%2)=FP
2170       REM Store addr. of instr. to exec. when call returns
2180       STACK(SP+%3)=IP+%2
2190       SP=SP+%3
2200       REM Move frame ptr. to top of stack. Move Instr. ptr. to jump addr.
2210       FP=SP:IP=ADDR
2220     ENDIF 
2230     GO# TRACING
2240   ENDIF :REM CALL
2250   IF OPCODE=18
2260     STKRANGE=SP-%2:EXEC CHKSTACK
2270     IF STKERR=%0
2280       STKRANGE=SP-%2-STACK(SP-%2):EXEC CHKSTACK
2290       IF STKERR=%0
2300         RVAL=STACK(SP)
2310         SP=FP
2320         REM Move Instr. ptr. to just after call. Restore frame ptr. to old addr.
2330         IP=STACK(SP):FP=STACK(SP-%1)
2340         REM Pop all frame info. off stack
2350         SP=SP-%2-STACK(SP-%2)
2360         REM Put return val. at top of stack
2370         STACK(SP)=RVAL
2380       ENDIF 
2390     ENDIF 
2400     GO# TRACING
2410   ENDIF :REM RET
2420   IF OPCODE=1
2430     STKRANGE=SP-%1:EXEC CHKSTACK
2440     IF STKERR=%0
2450       STACK(SP-%1)=STACK(SP-%1)+STACK(SP)
2460       SP=SP-%1
2470     ENDIF 
2480     GO# TRACING
2490   ENDIF :REM IADD
2500   IF OPCODE=5
2510     STKRANGE=SP-%1:EXEC CHKSTACK
2520     IF STKERR=%0
2530       VAL1=STACK(SP):VAL2=STACK(SP-%1)
2540       SP=SP-%1
2550       IF VAL1=VAL2:STACK(SP)=%1:ELSE :STACK(SP)=%0:ENDIF 
2560     ENDIF 
2570     GO# TRACING
2580   ENDIF :REM IEQ
2590   IF OPCODE=19
2600     STKRANGE=SP-%1:EXEC CHKSTACK
2610     IF STKERR=%0
2620       STACK(SP-%1)=STACK(SP-%1) DIV STACK(SP)
2630       SP=SP-%1
2640     ENDIF 
2650     GO# TRACING
2660   ENDIF :REM IDIV
2670   IF OPCODE=20
2680     STKRANGE=SP-%1:EXEC CHKSTACK
2690     IF STKERR=%0
2700       STACK(SP-%1)=STACK(SP-%1) MOD STACK(SP)
2710       SP=SP-%1
2720     ENDIF 
2730     GO# TRACING
2740   ENDIF :REM IMOD
2750   IF OPCODE=21
2760     STKRANGE=SP+%1:EXEC CHKSTACK
2770     IF STKERR=%0
2780       SP=SP+%1:STACK(SP)=TIME
2790     ENDIF 
2800     GO# TRACING
2810   ENDIF :REM TIME
2820   ? "INVALID OPCODE: ";:? OPCODE;:? " AT IP=";:? IP-1:END 
2830   # TRACING:IF TR=%1 THEN EXEC DISPSTACK
2840 WEND 
2850 IF IP<CODELEN
2860   IF CODE(IP)=16 THEN OPCODE=16
2870   IF TR=%1:EXEC DISASSEMBLE:EXEC DISPSTACK:EXEC DUMPDATAMEM:ENDIF 
2880 ELSE 
2890   ? "IP OVERFLOW"
2900   IF TR=%1 THEN EXEC DISPSTACK
2910 ENDIF 
2920 ENDPROC 
2930 PROC DISASSEMBLE
2940   OPANDS=OPANDCNT(OPCODE)
2950   IF IP<CODELEN
2960     ? IP;:? ": ";:? INST$(OPCODE*6+%1,OPCODE*6+6);
2970     IF OPANDS>=%1 THEN ? " ";:? CODE(IP+%1);
2980     IF OPANDS=%2 THEN ? ",";:? CODE(IP+%2);
2990   ENDIF 
3000 ENDPROC 
3010 PROC DISPSTACK
3020   ? "  STACK=[";
3030   IF SP>=%0:FOR K=%0 TO SP:? " ";:? STACK(K);:NEXT K:ENDIF 
3040   ? " ]"
3050 ENDPROC 
3060 PROC DUMPDATAMEM
3070   IF DSIZE>%0
3080     ? :? "DATA MEMORY:"
3090     FOR I=%0 TO DSIZE-%1:? I;:? ": ";:? GLOBALS(I):NEXT I
3100   ENDIF 
3110 ENDPROC 
3120 PROC LDPRG
3130   LDSUCCESS=%0:TRAP #CLOSELD
3140   OPEN #1,4,0,COM$(8,LEN(COM$))
3150   CODELEN=%0
3160   %GET #1;A:IP=A:STADDR=A:LDSUCCESS=%1
3170   # LD_LOOP:%GET #1;A:CODE(CODELEN)=A:CODELEN=CODELEN+%1:GO# LD_LOOP
3180   # CLOSELD:CLOSE #1:TRAP 40000
3190 ENDPROC 
3200 PROC LSTPRG
3210   IF CODELEN>%0
3220     IP=%0
3230     WHILE IP<CODELEN
3240       OPCODE=CODE(IP):EXEC DISASSEMBLE:? 
3250       IP=IP+OPANDS+%1
3260     WEND 
3270     IP=STADDR
3280   ENDIF 
3290 ENDPROC 
3300 PROC CHKNUM:REM parms: NUMTEST$
3310   NUMP=1:STRIDX=1:WHILE STRIDX<=LEN(NUMTEST$)
3320     IF ASC(NUMTEST$(STRIDX,STRIDX))<48 OR ASC(NUMTEST$(STRIDX,STRIDX))>57:NUMP=0:EXIT :ENDIF 
3330     STRIDX=STRIDX+1
3340   WEND 
3350 ENDPROC 
3360 PROC CHKSTACK:REM parms: STKRANGE,STACKLEN
3370   IF STKRANGE<-1
3380     STKERR=%1
3390     ? "ERROR: STACK UNDERFLOW"
3400   ENDIF 
3410   IF STKRANGE>STACKLEN-%1
3420     STKERR=%1
3430     ? "ERROR: STACK OVERFLOW"
3440   ENDIF 
3450 ENDPROC 
3460 # OPCODES:DATA NULL  ,0,IADD  ,0,ISUB  ,0,IMUL  ,0,ILT   ,0,IEQ   ,0,BR    ,1,BRT   ,1,BRF   ,1,ICONST,1
3470 DATA LOAD  ,1,GLOAD ,1,STORE ,1,GSTORE,1,PRINT ,0,POP   ,0,HALT  ,0,CALL  ,2,RET   ,0
3480 DATA IDIV  ,0,IMOD  ,0,TIME  ,0
