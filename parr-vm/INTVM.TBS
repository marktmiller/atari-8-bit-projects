100 SP=-1:FP=-1:TR=%0
110 DSIZE=%1:CODESTORE=200:STACKLEN=50:OPCODES=22
120 IF DSIZE>%0 THEN DIM GLOBALS(DSIZE)
130 DIM CODE(CODESTORE),STACK(STACKLEN),OPANDCNT(OPCODES),OPCODE$(6),INST$(OPCODES*6+6)
140 DIM NUMTEST$(4),DSKSPEC$(2)
150 FOR I=%0 TO CODELEN-%1:CODE(I)=%0:NEXT I:FOR I=%0 TO STACKLEN-%1:STACK(I)=%0:NEXT I
160 RESTORE #OPCODES:FOR B=%0 TO OPCODES-%1:READ OPCODE$,X:INST$(B*6+%1)=OPCODE$:OPANDCNT(B)=X:NEXT B
170 DIM COM$(40)
180 OPEN #2,4,0,"E:"
190 REPEAT 
200   ? :? "READY"
210   INPUT #2;COM$
220   IF LEN(COM$)>=2
230     IF COM$(1,2)="IP"
240       IF LEN(COM$)>2
250         IF COM$(3,3)="="
260           IF LEN(COM$)>3
270             NUMTEST$=COM$(4):EXEC CHKNUM
280             IF NUMP=1
290               IP=VAL(COM$(4,LEN(COM$))):GO# ENDINTERACT_LOOP
300             ELSE 
310               ? "ERROR: CAN ONLY ASSIGN NUMBER TO REGISTER":GO# ENDINTERACT_LOOP
320             ENDIF :REM * IF NUMP=1 *
330           ELSE 
340             IP=0:GO# ENDINTERACT_LOOP
350           ENDIF :REM * IF LEN(COM$)>3 *
360         ELSE 
370           ? "SYNTAX ERROR":GO# ENDINTERACT_LOOP
380         ENDIF :REM * IF COM$(3,3)="=" *
390       ELSE 
400         ? IP:GO# ENDINTERACT_LOOP
410       ENDIF :REM * IF LEN(COM$)>2 *
420     ENDIF :REM * IF COM$(1,2)="IP" *
430     IF COM$(1,2)="SP"
440       IF LEN(COM$)>2
450         IF COM$(3,3)="="
460           IF LEN(COM$)>3
470             NUMTEST$=COM$(4):EXEC CHKNUM
480             IF NUMP=1
490               SP=VAL(COM$(4,LEN(COM$))):GO# ENDINTERACT_LOOP
500             ELSE 
510               ? "ERROR: CAN ONLY ASSIGN NUMBER TO REGISTER":GO# ENDINTERACT_LOOP
520             ENDIF :REM * IF NUMP=1 *
530           ELSE 
540             SP=0:GO# ENDINTERACT_LOOP
550           ENDIF :REM * IF LEN(COM$)>3 *
560         ELSE 
570           ? "SYNTAX ERROR":GO# ENDINTERACT_LOOP
580         ENDIF :REM * IF COM$(3,3)="=" *
590       ELSE 
600         ? SP:GO# ENDINTERACT_LOOP
610       ENDIF :REM * IF LEN(COM$)>2 *
620     ENDIF :REM * IF COM$(1,2)="SP" *
630   ENDIF :REM * IF LEN(COM$)>=2 *
640   IF LEN(COM$)=3
650     IF COM$(1,3)="RUN"
660       IF CODELEN>0:EXEC EXCODE:ENDIF 
670       GO# ENDINTERACT_LOOP
680     ENDIF 
690   ENDIF 
700   IF LEN(COM$)=4
710     IF COM$(1,4)="LIST":EXEC LSTPRG:ENDIF 
720     IF COM$(1,4)="EXIT":STPLOOP=1:ENDIF 
730     GO# ENDINTERACT_LOOP
740   ENDIF 
750   IF LEN(COM$)=5
760     IF COM$(1,5)="DEBUG":TR=%1:ENDIF 
770     GO# ENDINTERACT_LOOP
780   ENDIF 
790   IF LEN(COM$)=7
800     IF COM$(1,7)="NODEBUG":TR=%0:ENDIF 
810     GO# ENDINTERACT_LOOP
820   ENDIF 
830   IF LEN(COM$)>=12
840     IF COM$(1,6)="BYTELD"
850       DSKSPEC$=COM$(8,9):EXEC CHKDSKSPEC
860       IF DSSVALID
870         IF COM$(9,9)=":" OR COM$(10,10)=":"
880           EXEC LDPRG
890           IF LDSUCCESS=%0 THEN ? "ERROR: FILE NOT FOUND"
900           GO# ENDINTERACT_LOOP
910         ENDIF 
920       ELSE 
930         ? "ERROR: DISK SPECIFICATION NOT VALID"
940       ENDIF 
950     ENDIF 
960   ENDIF 
970   ? "ERROR: ";COM$;" NOT A KNOWN COMMAND"
980   # ENDINTERACT_LOOP:UNTIL STPLOOP=1
990 CLOSE #2
1000 END 
1010 PROC EXCODE
1020   STKERR=%0
1030   WHILE IP<CODELEN AND CODE(IP)<>16 AND STKERR=%0
1040     OPCODE=CODE(IP)
1050     IF TR=%1 THEN EXEC DISASSEMBLE
1060     IP=IP+%1
1070     IF OPCODE=14
1080       STKRANGE=SP-%1:EXEC CHKSTACK
1090       IF STKERR=%0
1100         ? STACK(SP);" ";
1110         SP=SP-%1
1120       ENDIF 
1130       GO# TRACING
1140     ENDIF 
1150   ENDIF :REM PRINT
1160   IF OPCODE=9
1170     STKRANGE=SP+%1:EXEC CHKSTACK
1180     IF STKERR=%0
1190       SP=SP+%1
1200       STACK(SP)=CODE(IP)
1210       IP=IP+%1
1220     ENDIF 
1230     GO# TRACING
1240   ENDIF :REM ICONST
1250   IF OPCODE=13
1260     STKRANGE=SP-%1:EXEC CHKSTACK
1270     IF STKERR=%0
1280       ADDR=CODE(IP)
1290       GLOBALS(ADDR)=STACK(SP)
1300       SP=SP-%1:IP=IP+%1
1310     ENDIF 
1320     GO# TRACING
1330   ENDIF :REM GSTORE
1340   IF OPCODE=11
1350     STKRANGE=SP+%1:EXEC CHKSTACK
1360     IF STKERR=%0
1370       SP=SP+%1
1380       ADDR=CODE(IP)
1390       STACK(SP)=GLOBALS(ADDR)
1400       IP=IP+%1
1410     ENDIF 
1420     GO# TRACING
1430   ENDIF :REM GLOAD
1440   IF OPCODE=4
1450     STKRANGE=SP-%1:EXEC CHKSTACK
1460     IF STKERR=%0
1470       VAL1=STACK(SP):VAL2=STACK(SP-%1)
1480       SP=SP-%1
1490       IF VAL2<VAL1:STACK(SP)=%1:ELSE :STACK(SP)=%0:ENDIF 
1500     ENDIF 
1510     GO# TRACING
1520   ENDIF :REM ILT
1530   IF OPCODE=2
1540     STKRANGE=SP-%1:EXEC CHKSTACK
1550     IF STKERR=%0
1560       STACK(SP-%1)=STACK(SP-%1)-STACK(SP)
1570       SP=SP-%1
1580     ENDIF 
1590     GO# TRACING
1600   ENDIF :REM ISUB
1610   IF OPCODE=3
1620     STKRANGE=SP-%1:EXEC CHKSTACK
1630     IF STKERR=%0
1640       STACK(SP-%1)=STACK(SP-%1)*STACK(SP)
1650       SP=SP-%1
1660     ENDIF 
1670     GO# TRACING
1680   ENDIF :REM IMUL
1690   IF OPCODE=6:IP=CODE(IP):GO# TRACING:ENDIF :REM BR
1700   IF OPCODE=7
1710     STKRANGE=SP-%1:EXEC CHKSTACK
1720     IF STKERR=%0
1730       IF STACK(SP)=%1:IP=CODE(IP):ELSE :IP=IP+%1:ENDIF 
1740       SP=SP-%1
1750     ENDIF 
1760     GO# TRACING
1770   ENDIF :REM BRT
1780   IF OPCODE=8
1790     STKRANGE=SP-%1:EXEC CHKSTACK
1800     IF STKERR=%0
1810       IF STACK(SP)=%0:IP=CODE(IP):ELSE :IP=IP+%1:ENDIF 
1820       SP=SP-%1
1830     ENDIF 
1840     GO# TRACING
1850   ENDIF :REM BRF
1860   IF OPCODE=10
1870     STKRANGE=SP+%1:EXEC CHKSTACK
1880     IF STKERR=%0
1890       SP=SP+%1
1900       OFFSET=CODE(IP)
1910       STACK(SP)=STACK(FP+OFFSET)
1920       IP=IP+%1
1930     ENDIF 
1940     GO# TRACING
1950   ENDIF :REM LOAD
1960   IF OPCODE=12
1970     STKRANGE=SP-%1:EXEC CHKSTACK
1980     IF STKERR=%0
1990       OFFSET=CODE(IP)
2000       STACK(FP+OFFSET)=STACK(SP)
2010       IP=IP+%1:SP=SP-%1
2020     ENDIF 
2030     GO# TRACING
2040   ENDIF :REM STORE
2050   IF OPCODE=15
2060     STKRANGE=SP-%1:EXEC CHKSTACK
2070     IF STKERR=%0
2080       SP=SP-%1
2090     ENDIF 
2100     GO# TRACING
2110   ENDIF :REM POP
2120   IF OPCODE=17
2130     STKRANGE=SP+%3:EXEC CHKSTACK
2140     IF STKERR=%0
2150       ADDR=CODE(IP)
2160       REM Store frame ptr.
2170       STACK(SP+%1)=CODE(IP+%1)
2180       REM Store arg. count
2190       STACK(SP+%2)=FP
2200       REM Store addr. of instr. to exec. when call returns
2210       STACK(SP+%3)=IP+%2
2220       SP=SP+%3
2230       REM Move frame ptr. to top of stack. Move Instr. ptr. to jump addr.
2240       FP=SP:IP=ADDR
2250     ENDIF 
2260     GO# TRACING
2270   ENDIF :REM CALL
2280   IF OPCODE=18
2290     STKRANGE=SP-%2:EXEC CHKSTACK
2300     IF STKERR=%0
2310       STKRANGE=SP-%2-STACK(SP-%2):EXEC CHKSTACK
2320       IF STKERR=%0
2330         RVAL=STACK(SP)
2340         SP=FP
2350         REM Move Instr. ptr. to just after call. Restore frame ptr. to old addr.
2360         IP=STACK(SP):FP=STACK(SP-%1)
2370         REM Pop all frame info. off stack
2380         SP=SP-%2-STACK(SP-%2)
2390         REM Put return val. at top of stack
2400         STACK(SP)=RVAL
2410       ENDIF 
2420     ENDIF 
2430     GO# TRACING
2440   ENDIF :REM RET
2450   IF OPCODE=1
2460     STKRANGE=SP-%1:EXEC CHKSTACK
2470     IF STKERR=%0
2480       STACK(SP-%1)=STACK(SP-%1)+STACK(SP)
2490       SP=SP-%1
2500     ENDIF 
2510     GO# TRACING
2520   ENDIF :REM IADD
2530   IF OPCODE=5
2540     STKRANGE=SP-%1:EXEC CHKSTACK
2550     IF STKERR=%0
2560       VAL1=STACK(SP):VAL2=STACK(SP-%1)
2570       SP=SP-%1
2580       IF VAL1=VAL2:STACK(SP)=%1:ELSE :STACK(SP)=%0:ENDIF 
2590     ENDIF 
2600     GO# TRACING
2610   ENDIF :REM IEQ
2620   IF OPCODE=19
2630     STKRANGE=SP-%1:EXEC CHKSTACK
2640     IF STKERR=%0
2650       STACK(SP-%1)=STACK(SP-%1) DIV STACK(SP)
2660       SP=SP-%1
2670     ENDIF 
2680     GO# TRACING
2690   ENDIF :REM IDIV
2700   IF OPCODE=20
2710     STKRANGE=SP-%1:EXEC CHKSTACK
2720     IF STKERR=%0
2730       STACK(SP-%1)=STACK(SP-%1) MOD STACK(SP)
2740       SP=SP-%1
2750     ENDIF 
2760     GO# TRACING
2770   ENDIF :REM IMOD
2780   IF OPCODE=21
2790     STKRANGE=SP+%1:EXEC CHKSTACK
2800     IF STKERR=%0
2810       SP=SP+%1:STACK(SP)=TIME
2820     ENDIF 
2830     GO# TRACING
2840   ENDIF :REM TIME
2850   ? "INVALID OPCODE: ";:? OPCODE;:? " AT IP=";:? IP-1:END 
2860   # TRACING:IF TR=%1 THEN EXEC DISPSTACK
2870 WEND 
2880 IF IP<CODELEN
2890   IF CODE(IP)=16 THEN OPCODE=16
2900   IF TR=%1:EXEC DISASSEMBLE:EXEC DISPSTACK:EXEC DUMPDATAMEM:ENDIF 
2910 ELSE 
2920   ? "IP OVERFLOW"
2930   IF TR=%1 THEN EXEC DISPSTACK
2940 ENDIF 
2950 ENDPROC 
2960 PROC DISASSEMBLE
2970   OPANDS=OPANDCNT(OPCODE)
2980   IF IP<CODELEN
2990     ? IP;:? ": ";:? INST$(OPCODE*6+%1,OPCODE*6+6);
3000     IF OPANDS>=%1 THEN ? " ";:? CODE(IP+%1);
3010     IF OPANDS=%2 THEN ? ",";:? CODE(IP+%2);
3020   ENDIF 
3030 ENDPROC 
3040 PROC DISPSTACK
3050   ? "  STACK=[";
3060   IF SP>=%0:FOR K=%0 TO SP:? " ";:? STACK(K);:NEXT K:ENDIF 
3070   ? " ]"
3080 ENDPROC 
3090 PROC DUMPDATAMEM
3100   IF DSIZE>%0
3110     ? :? "DATA MEMORY:"
3120     FOR I=%0 TO DSIZE-%1:? I;:? ": ";:? GLOBALS(I):NEXT I
3130   ENDIF 
3140 ENDPROC 
3150 PROC LDPRG
3160   LDSUCCESS=%0:TRAP #CLOSELD
3170   OPEN #1,4,0,COM$(8,LEN(COM$))
3180   CODELEN=%0
3190   %GET #1;A:IP=A:STADDR=A:LDSUCCESS=%1
3200   # LD_LOOP:%GET #1;A:CODE(CODELEN)=A:CODELEN=CODELEN+%1:GO# LD_LOOP
3210   # CLOSELD:CLOSE #1:TRAP 40000
3220 ENDPROC 
3230 PROC LSTPRG
3240   IF CODELEN>%0
3250     IP=%0
3260     WHILE IP<CODELEN
3270       OPCODE=CODE(IP):EXEC DISASSEMBLE:? 
3280       IP=IP+OPANDS+%1
3290     WEND 
3300     IP=STADDR
3310   ENDIF 
3320 ENDPROC 
3330 PROC CHKNUM:REM parms: NUMTEST$
3340   NUMP=1:STRIDX=1:WHILE STRIDX<=LEN(NUMTEST$)
3350     IF ASC(NUMTEST$(STRIDX,STRIDX))<48 OR ASC(NUMTEST$(STRIDX,STRIDX))>57:NUMP=0:EXIT :ENDIF 
3360     STRIDX=STRIDX+1
3370   WEND 
3380 ENDPROC 
3390 PROC CHKSTACK:REM parms: STKRANGE,STACKLEN
3400   IF STKRANGE<-1
3410     STKERR=%1
3420     ? "ERROR: STACK UNDERFLOW"
3430   ENDIF 
3440   IF STKRANGE>STACKLEN-%1
3450     STKERR=%1
3460     ? "ERROR: STACK OVERFLOW"
3470   ENDIF 
3480 ENDPROC 
3490 PROC CHKDSKSPEC:REM parm:DSKSPEC$
3500   DSSVALID=%0:NUMTEST$=DSKSPEC$(2,2)
3510   EXEC CHKNUM
3520   IF ASC(DSKSPEC$(1,1))>=65 AND ASC(DSKSPEC$(1,1))<=90 AND NUMP THEN DSSVALID=%1
3530 ENDPROC 
3540 # OPCODES:DATA NULL  ,0,IADD  ,0,ISUB  ,0,IMUL  ,0,ILT   ,0,IEQ   ,0,BR    ,1,BRT   ,1,BRF   ,1,ICONST,1
3550 DATA LOAD  ,1,GLOAD ,1,STORE ,1,GSTORE,1,PRINT ,0,POP   ,0,HALT  ,0,CALL  ,2,RET   ,0
3560 DATA IDIV  ,0,IMOD  ,0,TIME  ,0
