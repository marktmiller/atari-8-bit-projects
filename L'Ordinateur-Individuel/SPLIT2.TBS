1 REM 6000 A5 57   .VBI LDA DINDEX .
2 REM 6002 D0 24   .BNE EXIT       .
3 REM 6004 A5 54   .LDA ROWCRS     .
4 REM 6006 CD 2B 60.CMP POS1       .
5 REM 6009 F0 07   .BEQ RESET1     .
6 REM 600B CD 2C 60.CMP POS2       .
7 REM 600E F0 0E   .BEQ RESET2     .
8 REM 6010 D0 16   .BNE EXIT       .
9 REM 6012 AD 2D 60.RESET1 LDA RPOS1
10 REM 6015 85 54   .STA ROWCRS     .
11 REM 6017 A9 8E   .LDA #UP        .
12 REM 6019 8D FC 02.STA CH         .
13 REM 601C D0 0A   .BNE EXIT       .
14 REM 601E AD 2E 60.RESET2 LDA RPOS2
15 REM 6021 85 54   .STA ROWCRS     .
16 REM 6023 A9 8F   .LDA #DOWN      .
17 REM 6025 8D FC 02.STA CH         .
18 REM 6028 4C 62 E4.EXIT JMP XITVBV.
19 REM 602B 00      .POS1 .BYTE 0   .
20 REM 602C 00      .POS2 .BYTE 0   .
21 REM 602D 00      .RPOS1 .BYTE 0  .
22 REM 602E 00      .RPOS2 .BYTE 0  .
23 REM 602F 68      .ROWCURS PLA    .
24 REM 6030 68      .PLA            .
25 REM 6031 68      .PLA            .
26 REM 6032 8D 2B 60.STA POS1       .
27 REM 6035 68      .PLA            .
28 REM 6036 68      .PLA            .
29 REM 6037 18      .CLC            .
30 REM 6038 69 01   .ADC #1         .
31 REM 603A 8D 2D 60.STA RPOS1      .
32 REM 603D 68      .PLA            .
33 REM 603E 68      .PLA            .
34 REM 603F 8D 2C 60.STA POS2       .
35 REM 6042 68      .PLA            .
36 REM 6043 68      .PLA            .
37 REM 6044 38      .SEC            .
38 REM 6045 E9 01   .SBC #1         .
39 REM 6047 8D 2E 60.STA RPOS2      .
40 REM 604A A9 07   .LDA #7         .
41 REM 604C A2 60   .LDX # >VBI     .
42 REM 604E A0 00   .LDY # <VBI     .
43 REM 6050 4C 5C E4.VBINIT JMP SETVB
44 REM 6080 68      .FILL PLA       .
45 REM 6081 68      .PLA            .
46 REM 6082 85 01   .STA SCRADR+1   .
47 REM 6084 68      .PLA            .
48 REM 6085 85 00   .STA SCRADR     .
49 REM 6087 68      .PLA            .
50 REM 6088 68      .PLA            .
51 REM 6089 8D B5 60.STA VALUE      .
52 REM 608C 68      .PLA            .
53 REM 608D 8D B7 60.STA NUMBYTES+1 .
54 REM 6090 68      .PLA            .
55 REM 6091 8D B6 60.STA NUMBYTES   .
56 REM 6094 A0 00   .DFILL LDY #0   .
57 REM 6096 AD B5 60.LDA VALUE      .
58 REM 6099 91 00   .STA (SCRADR),Y .
59 REM 609B C8      .INY            .
60 REM 609C D0 FB   .BNE LOOP1      .
61 REM 609E CE B7 60.DEC NUMBYTES+1 .
62 REM 60A1 F0 05   .BEQ REMAIN     .
63 REM 60A3 E6 01   .INC SCRADR+1   .
64 REM 60A5 4C 99 60.JMP LOOP1      .
65 REM 60A8 E6 01   .REMAIN INC SCRAD
66 REM 60AA 91 00   .LOOP2 STA (SCRAD
67 REM 60AC CC B6 60.CPY NUMBYTES   .
68 REM 60AF F0 03   .BEQ STOP       .
69 REM 60B1 C8      .INY            .
70 REM 60B2 D0 F6   .BNE LOOP2      .
71 REM 60B4 60      .STOP RTS       .
72 REM 60B5 00      .VALUE .BYTE 0  .
73 REM 60B6 00 00   .NUMBYTES .WORD .
74 REM 60E0 48      .GRAFIC PHA     .
75 REM 60E1 A2 60   .LDX #$60       .
76 REM 60E3 A9 0C   .LDA #$0C       .
77 REM 60E5 9D 42 03.STA ICCOM,X    .
78 REM 60E8 20 56 E4.JSR CIOV       .
79 REM 60EB A2 60   .LDX #$60       .
80 REM 60ED A9 03   .LDA #3         .
81 REM 60EF 9D 42 03.STA ICCOM,X    .
82 REM 60F2 A9 0D   .LDA #NAME&255  .
83 REM 60F4 9D 44 03.STA ICBAL,X    .
84 REM 60F7 A9 61   .LDA #NAME/256  .
85 REM 60F9 9D 45 03.STA ICBAH,X    .
86 REM 60FC 68      .PLA            .
87 REM 60FD 9D 4B 03.STA ICAX2,X    .
88 REM 6100 29 F0   .AND #$F0       .
89 REM 6102 49 10   .EOR #$10       .
90 REM 6104 09 0C   .ORA #$0C       .
91 REM 6106 9D 4A 03.STA ICAX1,X    .
92 REM 6109 20 56 E4.JSR CIOV       .
93 REM 610C 60      .RTS            .
94 REM 610D 53 3A 9B.NAME .BYTE "S:".
95 REM 6150 68      .T0GR8 PLA      .
96 REM 6151 A5 58   .LDA SAVMSC     .
97 REM 6153 8D 73 61.STA GR0        .
98 REM 6156 A5 59   .LDA SAVMSC+1   .
99 REM 6158 8D 74 61.STA GR0+1      .
100 REM 615B A9 00   .LDA #0         .
101 REM 615D 20 E0 60.JSR GRAFIC     .
102 REM 6160 68      .PLA            .
103 REM 6161 8D 31 02.STA SDLSTL+1   .
104 REM 6164 68      .PLA            .
105 REM 6165 8D 30 02.STA SDLSTL     .
106 REM 6168 A9 08   .LDA #8         .
107 REM 616A 85 57   .STA DINDEX     .
108 REM 616C 68      .PLA            .
109 REM 616D 85 59   .STA SAVMSC+1   .
110 REM 616F 68      .PLA            .
111 REM 6170 85 58   .STA SAVMSC     .
112 REM 6172 60      .RTS            .
113 REM 6173 00 00   .GR0 .WORD 0    .
114 REM 6175 68      .TOGR0 PLA      .
115 REM 6176 AD 73 61.LDA GR0        .
116 REM 6179 85 58   .STA SAVMSC     .
117 REM 617B AD 74 61.LDA GR0+1      .
118 REM 617E 85 59   .STA SAVMSC+1   .
119 REM 6180 A9 00   .LDA #0         .
120 REM 6182 85 57   .STA DINDEX     .
121 REM 6184 60      .RTS            .
122 REM 0000 XX      .end program    .
130 REM This version substitutes "Pseudo-Assembler" code for ML in DATA stmts.
140 REM Locations of ML support routines
150 REM ROWCURS $6000-$6052 - Brackets cursor
160 REM FILL $6080-$60B7 - Used to clear Gr. 8 display
170 REM GRAFIC $60E0-$610F - GRAPHICS command in ML
180 REM SPTRANS $6150-$6184
190 REM Split-screen transition routines - Transition between Gr. 8 & Gr. 0
200 GRAPHICS 0
210 REM DL1=97 GR.8 LINES, 12 GR.0 LINES, AT ADDRESS $A400 (41984)
220 REM GR.8 SCREEN MEM. AT $A600 (42496)
230 DL1ADR=$A400:GR8SCRNADR=$A600
240 CURRDLADR=DL1ADR:GR8LINES=96:GR0LINES=12
250 REM Set up Gr. 8 portion
260 ? "Setting up display list"
270 ? "Creating Graphics 8 portion"
280 RESTORE 860:FOR I=0 TO 5:READ A:POKE CURRDLADR+I,A:NEXT I
290 OFFSET=CURRDLADR+6
300 MEMPTR=GR8SCRNADR+40
310 FOR I=0 TO GR8LINES
320   REM Detect if 4K Antic mem. limit reached
330   X=MEMPTR-INT(MEMPTR/4096)*4096-40
340   IF X>=0
350     DLPTR=OFFSET+I
360     REM Detect if 1K Antic PC limit reached (not used. Included for completeness)
370     X=DLPTR-INT(DLPTR/1024)*1024-3
380     IF X=0
390       REM 1K limit reached. Insert code to reset Antic prog. counter
400       DLPHI=INT(DLPTR/256):DLPLO=DLPTR-DLPHI*256
410       POKE DLPTR,1:POKE DLPTR+1,DLPLO:POKE DLPTR+2,DLPHI
420     ELSE 
430       POKE OFFSET+I,15:REM Insert Gr. 8 line code
440     ENDIF 
450   ELSE 
460     REM 4K limit reached. Insert code to reset Antic mem. scanner
470     MEMHI=INT(MEMPTR/256):MEMLO=MEMPTR-MEMHI*256
480     POKE OFFSET+I,79:POKE OFFSET+I+1,MEMLO:POKE OFFSET+I+2,MEMHI:I=I+2
490   ENDIF 
500   MEMPTR=MEMPTR+40
510 NEXT I
520 REM Set up Gr. 0 portion
530 ? "Creating Graphics 0 portion"
540 REM Insert code for transition to Gr. 0
550 FOR I=GR8LINES+1 TO GR8LINES+1+3:READ A:POKE OFFSET+I,A:NEXT I
560 OFFSET=CURRDLADR+6+GR8LINES+1+4
570 REM Insert code for Gr. 0 lines
580 FOR I=0 TO GR0LINES-2:POKE OFFSET+I,2:NEXT I
590 OFFSET=CURRDLADR+6+GR8LINES+1+4+GR0LINES-1
600 REM Finish off DL with VBJump instruction to top of DL
610 FOR I=0 TO 2:READ A:POKE OFFSET+I,A:NEXT I
620 REM Load "presentation" library
630 REM containing rout's for
640 REM - clearing scrn.
650 REM - "chg. to drawing" in Gr. 8
660 REM - chg. back to Gr. 0 (editing code)
670 ? "Loading machine language routines"
680 GOSUB 30290:REM Activate "Pseudo-Assembler"
690 REM CLEAR OUT GR.8 MEMORY
700 ? "Clearing out Graphics 8 memory"
710 X=USR($6080,GR8SCRNADR,0,320/8*97)
720 DLHI=INT(DL1ADR/256):DLLO=DL1ADR-DLHI*256
730 GR8HI=INT(GR8SCRNADR/256):GR8LO=GR8SCRNADR-GR8HI*256
740 REM Set Gr. 0 scrn. ptr. to top of scrn. mem.
750 GR0LO=PEEK(88):GR0HI=PEEK(89)
760 POKE 559,0:POKE 560,DLLO:POKE 561,DLHI:POKE 559,34
770 REM GO TO GR.0
780 POKE 87,0:POKE 88,GR0LO:POKE 89,GR0HI
790 CLS 
800 POSITION 2,12
810 REM Bracket cursor to lower half of Gr. 0 scrn.
820 X=USR($602F,0,12,11,23)
830 NEW :REM Clear mem. for prog's
840 END 
850 REM DL data
860 DATA 112,112,112,79,0,166
870 DATA 0,66,32,190
880 DATA 65,0,164
890 REM For debugging - Displays display list code
900 FOR I=$A400 TO $A400+6+GR8LINES-1+3+4+GR0LINES:? PEEK(I);",";:NEXT I
910 END 
920 REM Wipes out the page of DL mem.
930 FOR I=$A400 TO $A400+255:POKE I,0:NEXT I
940 END 
29970 REM Atari port by Mark Miller, 2025
29990 REM GOSUB 30290 to assemble code in comments
30010 REM Pseudo-Assembler
30020 REM 
30030 REM by Luc Pineau
30040 REM 
30050 REM (c) The Individual Computer
30060 REM and the author
30290 REM Pseudo-Assembler
30300 *F :DIM L$(4),D$(12),S$(2),C$(4):CM=DPEEK(136)
30310 REM 
30320 CM=CM+4
30330 L$=""
30340 FOR I=1 TO 4
30350   L$(I,I)=CHR$(PEEK(CM+I))
30360 NEXT I
30370 C$=L$:EXEC HTD:L=CVAL
30380 CM=CM+6
30390 IF PEEK(CM)<48 OR PEEK(CM)>70 THEN RETURN 
30400 D$=""
30410 FOR I=0 TO 7:D$(I+1,I+1)=CHR$(PEEK(CM+I)):NEXT I
30420 I=1
30430 FOR E=1 TO 3
30440   S$=D$(I,I+1)
30450   IF S$="  " THEN 30510
30460   IF S$="XX" THEN RETURN 
30470   C$=S$:EXEC HTD:S=CVAL
30480   POKE L,S
30490   I=I+3
30500   L=L+1
30510 NEXT E
30520 CM=CM+26
30530 GOTO 30310
30570 REM HTD
30580 REM Input: C$ - Hex str.
30590 REM Output: CVAL - Decimal val.
30600 PROC HTD
30610   CVAL=0:LN=LEN(C$)
30620   FOR DIG=1 TO LN
30630     VL=ASC(C$(DIG,DIG))
30640     REM Get power of 16 for digit
30650     PLVAL=LN-DIG+1:EXEC EX
30660     REM If digit is A-F
30670     IF VL>=65 AND VL<=70 THEN CVAL=CVAL+(VL-65+10)*FACT:GOTO 30700
30680     REM If digit is 0-9
30690     CVAL=CVAL+FACT*VAL(C$(DIG,DIG))
30700   NEXT DIG
30710 ENDPROC 
30750 REM EX
30760 REM Input: PLVAL - Place value
30770 REM Output: FACT - Power of 16 for place value
30780 PROC EX
30790   FACT=1
30800   IF PLVAL=2 THEN FACT=16
30810   IF PLVAL=3 THEN FACT=256
30820   IF PLVAL=4 THEN FACT=4096
30830 ENDPROC 
